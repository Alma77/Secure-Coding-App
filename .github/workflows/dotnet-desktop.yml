# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow will build, test, sign and package a WPF or Windows Forms desktop application
# built on .NET Core.
# To learn how to migrate your existing application to .NET Core,
# refer to https://docs.microsoft.com/en-us/dotnet/desktop-wpf/migration/convert-project-from-net-framework
#
# To configure this workflow:
#
# 1. Configure environment variables
# GitHub sets default environment variables for every workflow run.
# Replace the variables relative to your project in the "env" section below.
#
# 2. Signing
# Generate a signing certificate in the Windows Application
# Packaging Project or add an existing signing certificate to the project.
# Next, use PowerShell to encode the .pfx file using Base64 encoding
# by running the following Powershell script to generate the output string:
#
# $pfx_cert = Get-Content '.\SigningCertificate.pfx' -Encoding Byte
# [System.Convert]::ToBase64String($pfx_cert) | Out-File 'SigningCertificate_Encoded.txt'
#
# Open the output file, SigningCertificate_Encoded.txt, and copy the
# string inside. Then, add the string to the repo as a GitHub secret
# and name it "Base64_Encoded_Pfx."
# For more information on how to configure your signing certificate for
# this workflow, refer to https://github.com/microsoft/github-actions-for-desktop-apps#signing
#
# Finally, add the signing certificate password to the repo as a secret and name it "Pfx_Key".
# See "Build the Windows Application Packaging project" below to see how the secret is used.
#
# For more information on GitHub Actions, refer to https://github.com/features/actions
# For a complete CI/CD sample to get started with GitHub Action workflows for Desktop Applications,
# refer to https://github.com/microsoft/github-actions-for-desktop-apps

name: Secure-Code-App

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:

  Build-WGAdminAPI:
    runs-on: self-hosted

    steps:
    - name: Stop WGAdminAPI Service
      run: sudo sytemctl stop WGAdminAPI

    - name: Checkout
      uses: actions/checkout@v3

    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 6.0.x

    - name: RePublish WGAdminAPI
      run: |
        cd /var/repos/Secure-Coding-Project/WGAdminAPI
        dotnet build --configuration Release --no-restore
        dotnet publish -c Release -o /srv/WGAdminAPI

    - name: Restart WGAdminAPI Service
      run: sudo systemctl start WGAdminAPI

  Build-WGAdmin: 
    runs-on: self-hosted

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Use Node.js 14.x
      uses: actions/setup-node@v2
      with:        
        node-version: 14.x
        cache: 'npm'
      run: |
        cd /var/repos/Secure-Coding-Project/WGAdmin
        npm ci
        npm run build --if-present

  Build-Gallery-App:
    runs-on: self-hosted

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Build Docker Image
      run: |
        cd /var/repos/Securing-Coding-Project/Gallery
        docker build -t secure-coding-app.

    - name: Restart Docker Container
      run: |
        docker-compose stop secure-coding-app
        docker-compose start secure-coding-app -d
